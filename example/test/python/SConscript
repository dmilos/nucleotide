import os
import copy
import nucleotide

Import('settings')


## Primary Project Properties
name_bare = 'UniversalTest'
version = '1.0.0.0'

### Secondary Project Properties
name_full = name_bare + '-' + version
alias = name_bare


## Project compiler settings
platform      = settings.get_translator().get()['platform']['guest']

# Project directories

directory_prefix = name_full
directory_prefix = os.path.join( directory_prefix, platform )
directory_prefix += '-' + settings.get_translator().get()['cc']['name']
directory_prefix += '-' + settings.get_translator().get()['cc']['version'] + '-' + settings.get_custom( 'architecture' )
directory_prefix += '-' + settings.get_custom( 'compiler:configuration' )

#if 'win32' == platform :
#    name_full += '-' + master_configuration['compiler']['cplusplus']['os']['win32']['RTL']['switch'].lower()

directory_src  = settings.get_custom( 'directory:source' )
directory_temp = os.path.join( settings.get_custom( 'directory:source' ), directory_prefix )
directory_obj =  os.path.join( directory_temp, 'obj' )
directory_lib =  os.path.join( directory_temp, 'lib' )

directory_pdb =  directory_obj
directory_pdb =  directory_temp #os.path.join( directory_temp, 'pdb' )

directory_dll =  os.path.join( directory_temp, 'dll' )
directory_exe =  os.path.join( directory_temp, 'exe' )

settings.accumulate( 'blank' )

settings.accumulate( 'RTL', { 'type': 'static', 'configuration' : settings.get_custom( 'compiler:configuration' ) } )
settings.accumulate( 'PDB', { 'config': settings.get_custom( 'compiler:configuration' ) , 'PDBFILENAME': os.path.join( directory_pdb ,name_full + '.pdb' ) } )

settings.accumulate( settings.get_custom( 'compiler:configuration' ) )

settings.accumulate( 'exception' )
settings.accumulate( 'source:c++', { 'dialect': 'c++11' } )
settings.accumulate( 'boost:blank' )
settings.accumulate( 'RTTI' )

# CPP Defines

project_common_settings = copy.deepcopy( settings )

project_exe_settings = copy.deepcopy( settings )
project_dll_settings = copy.deepcopy( settings )


project_dll_settings.accumulate( 'shared_library' )

project_exe_settings.accumulate( 'executable' )

# CPP files to build


cc_files = []

cc_files += [ 'main.cpp' ]



# Deal with Scons
project_common_settings.accumulate( 'compiler:warning', { 'base-class-destructor-is-inaccessible': 'disable'  } )


envCommon  = nucleotide.Environment( project_common_settings ).native()


objects = []

for file in cc_files:
    source = os.path.join( directory_src, file )
    target = os.path.join( directory_obj, file + envCommon['OBJSUFFIX'] )
    objects += envCommon.Object( source = source, target = target )

### DLL
envDLL  = nucleotide.Environment( project_dll_settings ).native()

library_bin = envDLL.SharedLibrary( target = os.path.join( directory_dll, name_full + envDLL['SHLIBSUFFIX'] ) , source = objects )

library_install = envDLL.Install( settings.get_custom( 'directory:install' ), library_bin )

### Program
envProgram = nucleotide.Environment( project_exe_settings ).native()


program_bin = envProgram.Program( target = os.path.join( directory_exe, name_full + envProgram['PROGSUFFIX'] ), source = objects )

program_install = envProgram.Install( settings.get_custom( 'directory:install' ) , program_bin )


Default( program_install, library_install )

Return( 'library_install', 'program_install' )

